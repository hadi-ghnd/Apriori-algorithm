import re
import itertools
import os

file = input('Enter the name of transactions file: ') or 'transactions1.txt'
min_sup = float(input("Enter minimum support in percentage: ") or "20")
min_conf = float(input("Entern minimum confidence in percentage: ") or "50")

##################  reading data
f = open(file, "r")
transactions = []
items = set()
for line in f:   #save shoppings in transactions
    shop = line.split()
    transactions.append(shop)
    for word in re.findall(r'\w+', line):
        if not word.isdigit(): #avoid reading transaction IDs as items
            items.add(word) #set of items

################## initializations
min_sup = min_sup/100
min_conf = min_conf/100
numberOfTransactions = len(transactions)
numberOfItems = len(items)
rules = []

################## functions ################

def supportOf(itemset):
    #calculate support
    count=0
    for i in range(numberOfTransactions):  
        if(itemset.issubset(set(transactions[i]))):
            count += 1
    return count/numberOfTransactions


def dictCreate(itemset):
    # define dict to store itemset and its support
    itemDict = {"itemset":{},"support": 0.0}
    itemDict["itemset"] = itemset
    itemDict["support"] = supportOf(itemset)
    return itemDict
        

def joinItemSets(itemsets, length):
    itemsetsTemp=[]
    
    for t in range(len(itemsets)): 
        for q in range(t+1,len(itemsets)):
            if not itemsetsTemp.__contains__(itemsets[t].union(itemsets[q])):
                if (len(itemsets[t].union(itemsets[q]))==length):
                    itemsetsTemp.append(itemsets[t].union(itemsets[q]))
    return itemsetsTemp

def detectExtraItemsets(itemsetsTemp, nonfreqList):
    #remove itemsets with low support that are generated by joining other itemsets
    extraItemsets = []
    for u in itemsetsTemp:
        for w in nonfreqList:
            if w.issubset(u):
                extraItemsets.append(u)
    return extraItemsets
 
               
def generateAssociationRules(frequentList, minimumConfidence):
    #  association rules
    for i in frequentList:
        if len(i["itemset"]) >= 2:
            #generate all possible tuples of each itemset
            subs = itertools.chain(*[itertools.combinations(i["itemset"], q + 1) for q, a in enumerate(i["itemset"])])
            
            #rule leftSide ==> rightSide
            for leftSide in subs:
                leftSide = set(leftSide)
                rightSide = i["itemset"].difference(leftSide)
                if rightSide:
                    leftSidSet = next(item for item in frequentList if item["itemset"] == leftSide)
                    confidence = float( i["support"] / leftSidSet["support"] )
                    if confidence >= minimumConfidence:
                        rules.append((leftSide, rightSide, i["support"], confidence))
    return(rules)


def printResults(associationRules):
    
    print("\nminimum support: %.2d %%" %(100*min_sup))
    print("minimum confidence: %.2f %%" %(100*min_conf))
    print("input data file: " , os.path.abspath(file))
    
    j = 1
    print("\n     list of items: \n ====================== \n")
    for i in items:
        print(j , " " , i , "\n")
        j += 1
    
    print("\n     list of transactions: \n =============================== \n")
    for q in transactions:
        print("ID: %d items:" %int(q[0]), end=" ")
        print(*q[1:] , sep = ", ")
    
     #print all association rules
    print("\n     Association Rules: \n =========================")
    for i in associationRules:
        sup = i[2]*100
        cnf = i[3]*100
        print(i[0] , " ===> " , i[1], " with support: %.2f %%, and confidence: %.2f %%" % (sup, cnf))
        
def identifyFrequentItemsets(boughtItems, transactionRecords):
    #generate frequent itemsets
    freqList = []
    itemList = list(boughtItems)
    itemsets = [set([itemList[k]]) for k in range(len(itemList))] #list of 1-itemsets

    i = 1 #length of itemsets at each run
    
    #itemsets longer than the longest transaction (not considering transaction ID) are not interesting
    while i <= len(max(transactionRecords,key=len)) - 1: 
        
        nonfreqList = []
        itemsetsTemp=[]
        unionsToRemove = []
        
        #creating frequent i-itemsets
        for j in itemsets: # each j is an itemset 
            itemWithSup = dictCreate(j)
            # check with minimum support
            if supportOf(j) >= min_sup:
                freqList.append(itemWithSup)
            else:
                nonfreqList.append(j)
    
        for k in nonfreqList: #remove itemsets with less than enough support
            itemsets.remove(k)
    
        #print("\nremained %d-itemsets: " %i , *itemsets, sep='\n')
        i += 1
        
        itemsetsTemp = joinItemSets(itemsets, i) # join i-itemsets to get (i+1)-itemsets
        #print("\ninitial %d-itemsets: " %i , *itemsetsTemp, sep='\n')
        
        unionsToRemove = detectExtraItemsets(itemsetsTemp, nonfreqList)
                    
        for p in unionsToRemove:
            itemsetsTemp.remove(p)
            
        itemsets = itemsetsTemp
        if len(itemsets) <=1: #stop if there is only 0 or 1 itemset is left
            break
    return freqList

################## main
def main():
    freqList = identifyFrequentItemsets(items, transactions)  
    rules = generateAssociationRules(freqList, min_conf)
    printResults(rules)
    
if __name__ == '__main__':
    main()